---
name: Nightly

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Claircore branch to reference'
        required: false
      go_version:
        description: 'Go version to be used throughout'
        required: false
      tag:
        description: 'Tag to push resulting image to'
        required: false
  schedule:
    - cron: '30 5 * * *'

jobs:
  build:
    name: Build and Push container
    runs-on: 'ubuntu-latest'
    steps:
      - name: Setup
        id: setup
        env:
          QUAY_TOKEN: ${{ secrets.QUAY_TOKEN }}
          QUAY_API_TOKEN: ${{ secrets.QUAY_API_TOKEN }}
        # This step uses defaults written in the shell script instead of the
        # nicer workflow inputs so that the cron trigger works.
        run: |
          br=$(test -n "${{github.event.inputs.branch}}" && echo "${{github.event.inputs.branch}}" || echo main)
          gv=$(test -n "${{github.event.inputs.go_version}}" && echo "${{github.event.inputs.go_version}}" || echo 1.17.1)
          : "${repo:=$GITHUB_REPOSITORY}"
          test "${repo%%/*}" = quay && repo="projectquay/${repo##*/}" ||:
          printf '::set-output name=push::%s\n' "${{ env.QUAY_TOKEN != '' }}"
          printf '::set-output name=api::%s\n' "${{ env.QUAY_API_TOKEN != '' }}"
          printf '::set-output name=date::%s\n' "$(date -u '+%Y-%m-%d')"
          printf '::set-output name=expiration::%s\n' "$(($(date -u '+%s') + 1209600))"
          printf '::set-output name=tag::%s\n' "$(test -n "${{github.event.inputs.tag}}" && echo "${{github.event.inputs.tag}}" || echo nightly)"
          printf '::set-output name=claircore_branch::%s\n' "${br}"
          printf '::set-output name=go_version::%s\n' "${gv}"
          printf '::set-output name=repo::%s\n' "${repo}"
          # Environment variables
          printf 'CLAIRCORE_BRANCH=%s\n' "${br}" >> $GITHUB_ENV
          printf 'GO_VERSION=%s\n' "$(test "${#gv}" -gt 4 && echo "${gv%.*}" || echo "${gv}")" >> $GITHUB_ENV
          printf '%s/.local/go/bin\n' "$HOME" >> $GITHUB_PATH
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Go Toolchain
        uses: actions/cache@v2
        id: go-toolchain-cache
        with:
          path: ~/.local/go
          key: golang-${{ steps.setup.outputs.go_version }}-${{ runner.os }}
      - name: Get a supported go version
        if: steps.go-toolchain-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.local
          curl -sSLf "https://golang.org/dl/go${{ steps.setup.outputs.go_version }}.$(go env GOOS)-$(go env GOARCH).tar.gz" |\
            tar -xzC ~/.local
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Cache Go Builds
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: go-build-${{ steps.setup.outputs.go_version }}-${{ runner.os }}
          restore-keys: |
            go-build-${{ steps.setup.outputs.go_version }}
            go-build
      - name: Cache Go Modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: go-mod-${{ steps.setup.outputs.go_version }}-${{ runner.os }}-${{ hashFiles('./go.*') }}
          restore-keys: |
            go-mod-${{ steps.setup.outputs.go_version }}-${{ runner.os }}
            go-mod-${{ steps.setup.outputs.go_version }}
            go-mod
      - name: Modify module
        id: mod
        run: ./.github/script/nightly-module.sh
      - name: Login
        if: steps.setup.outputs.push
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USER }}
          password: ${{ secrets.QUAY_TOKEN }}
      - name: Build
        uses: docker/build-push-action@v2
        with:
          build-args: |
            GO_VERSION=${{ env.GO_VERSION }}
            CLAIR_VERSION=${{ steps.mod.outputs.clair_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ steps.setup.outputs.push }}
          tags: |
            quay.io/${{ steps.setup.outputs.repo }}:${{ steps.setup.outputs.tag }}
            quay.io/${{ steps.setup.outputs.repo }}:${{ steps.setup.outputs.tag }}-${{ steps.setup.outputs.date }}
      - name: Set Expiration
        if: steps.setup.outputs.push && steps.setup.outputs.api
        run: |
          curl --config - <<.
          silent
          show-error
          fail-with-body
          data-raw=$(jq -n '{expiration: ${{ steps.setup.outputs.expiration }}}|tostring')
          header="Authorization: Bearer ${{ secrets.QUAY_API_TOKEN }}"
          header="Content-Type: application/json"
          header="Accept: application/json"
          request=PUT
          url="https://quay.io/api/v1/repository/${{ steps.setup.outputs.repo }}/tag/${{ steps.setup.outputs.tag }}-${{ steps.setup.outputs.date }}"
          .
